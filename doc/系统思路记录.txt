1. web系统、消息队列服务器、手持机的通讯
    采用消息订阅、持久的方式。 
         发送方: ApacheMqSender.sendMsg_topic_persist
         #接收方：MesApacheMqReaderHandler_ShouChiJi 整个类单独处理读手持机  
                      不接收手持机的消息; 不发不收。web系统与手持机不通过消息通讯，直接调用ＷＥＢ的接口。
        
      手持机调用WEB的接口实现提交保存，不通过消息队列
      
    * 手持机调用放线接口：
             功能：
		     更新pla_seq_mater_detail（各工序物料计划及配料计划）
		     如果是第一道工序，则需更新机台计划的实际开始时间
    * 手持机调用收线接口
             功能：
                  更新pla_seq_mater_detail（各工序物料计划及配料计划）
                  如果是最后一道工序
                       更新pla_machine_plan_schedule（机台计划进度 ）   
                       更新pla_machine_plan(机台计划) 。实际结束时间，轴号
                  如果机台计划对应的工单已生产完毕，需要更新工单的状态为已完成
                  如果当天机台计划全部完成，则需更新周计划那天的状态is_flag为已生产
                  如果生产令对应的周计划已全部完成，则更新生产的状态为已完成。
                  
                （上面更新一系统表的逻辑，与机台发送到WEB端消息队列后，处理消息后的逻辑一致） 要求按模块化分段完成各业务的判断与修改。
                
2. web系统、消息队列服务器、机台hmi的通讯
    采用点对点模式。
      发送方：ApacheMqSender.sendMsg_point_to_point(队列名称、消息)   
           队列：配置文件中定义了几十个机台的消息队列名.每个机台一个队列，用的是机台编码
           
    读取：（目前三个点对点队列）
         MesApacheMqReaderServlet-->
         		MesApacheMqReaderHandler_Exception
         		MesApacheMqReaderHandler_RuntimeData
         		MesApacheMqReaderHandler_SaveData
         		
        WEB系统接收机台HMI的数据提交：三个队列(下面右边是队列名称). 采用点对点模式
            #机台生产完毕后，打包保存
			QUE_WEB_SAVE=QUE_WEB_save_data
			#机台生产中的异常上传
			QUE_WEB_EXCEPTION=QUE_WEB_exception_data
			#机台生产中的实时参数数据上传
			QUE_WEB_PARAM=QUE_WEB_param_data

3.web系统、消息队列服务器、电子看板的通讯
   采用点对点模式(不再使用订阅模式)
     发送方：机台HMI， WEA端接收到通知后，可发指定格式消息到指定队列，由电子看板消息监听端处理；
                                                                         	发送：ApacheMqSender.sendMsg_point_to_point_5秒不接丢弃
                                                                                                   要求发送的消息具有时效性，暂时以10秒为准，超时未接收则全删（防看板瞬间大量刷新死机）
                                                                                                   可写指定内容到echache
                                                                                                   要求发送的消息也具有时效性，如10秒超时自动丢弃。
                                                                                                   
                         看板监听一个专用消息队列QUE_Topic_p2p_Kanban，处理后写入各自缓存中。由websocket读缓存并决定通知页面内容。
                                                                                                   
      
     WEB端不需要接收电子看板的消息   
     
     电子看板通讯:
     	监听两个消息队列:1,QUE_p2p_Kanban 不过期数据,各机台进度和异常信息(消息不过期)
     			    2,QUE_p2p_Kanban_RT 叉车呼叫,各机台实时数据(温度等等)(消息定时失效)
		工序电子看板主要分为实时电子看板,进度电子看板,两个监听不同的消息队列
				    			                              
    
4.  web系统、消息队列服务器、叉车的通讯
           叉车可由c#/java /app 实现。目前由app实现 
       android对apacheMq的支持限制，web服务端只能写入，不能读。叉车只读不写
        消息采用订阅持久模式(由android系统决定只能用这个); 
         
         队列名称：QUE_Topic_Persist_chaChe
         发送方：web:ApacheMqSender.sendMsg_topic_persist
         叉车提交保存：通过web系统接口. 不通过消息队列。
          
                                                                      
                                                                                     
                                                                                     
                                                                                     
                                                                                     
  机台故障：
  1.首先机台hmi申报机能故障。 应该提供一个按钮。
    回头我与杨超联系。他会发一个命令到web消息队列。 
    web端解析命令后，在数据库表插一条记录。同时通知电子看板（用以前的方式）
2. 工程部人员过来首检，确认问题在哪里
    简单的话就直接修复了。
    在工程部的故障修复模块，录入问题描述。设置维护时间段
   电子看板显示故障信息，与录入的问题描述、时间段
3. 工程部维护结束后
    修改机台维护状态。修改机台状态到正常
    电子看板清除故障显示

 谁写后台的话也需要
估计电子看板展示故障这里，也需要修改。  故障有两步：1，只是报警，不知道原因与维护时间。2：确认维护时间点。进入维护期。3.结束：消除  



                                                                                  
领料这块儿，之前一直有个思路不通。 可以这么理解：
1. 铜杆不是原料。不需要领。（只计算损耗）
2.领料单中领料的明细只包括：胶料（或胶料的原料，经密炼机加工为颗粒）、胶带、钢片、等辅助材料
3.生成机台计划时，同步生成领料单，（注意：不生成领料明细。明细是实际领多少记录多少）
     领料单按工单+工作日区分， 不区分机台。  
     领料明细另外要加机台与材料区分
4.领料管理模块需实现功能：
    a. 按条件查询出领料单列表与状态。
    b. 限制未领或未领完的领料单才可以领料。
    c. 建议领料单加个开始领料-结束领料的功能
        系统计算出的领料数量未必合理，如果超了，系统新开领料单也是需要增加领料明细。不如不加限制数量。
        在结束之前可以超限。系统记录状态与数量。超额则状态设置为超额。（只是某一项物料超额）
        结束领料则是本领料单已完成。无状态的话，不太好管理
    d. 生产部领料时，可以领前天、昨天、明天，所有的领料单，不加限制。
        虽然一般是连续生产的，但调整工单的生产日期也很正常
         不限制必须领今天的。系统不校验日期即可。（延期、进度超前都有可能）
    e. 领料界面
         首页是领料单列表
                   领料单初始化状态为：未开始
                  点击开始领取时，修改领料状态为开始领料
                  点击结束领取时，修改领料状态为已领取
          进入明细：          
                   根据机台、工作日，查询机台材料计划表。按机台、工作日、材料清单，显示出当天各机台允许领料数量-已领（显示出来作为参考，同时赋值给input. ）
                   清单中默认领料数量允许修改。可以超限，也可以分多次领
                   提交时, 新增领料明细。
          
          另外：
                  生产部保存领料明细时，在仓库电子看板显示本工单当天领料合计
                                                                 呼叫叉车。把本工单的所有内容，分散叉运到各机台
                                                                                       叉运的任务要分机台，打包为一个大任务（记得之前json本身就是一个list,里面就是多个子任务）








出库单
1. 建立出库单主表，用之前的store_dg_ck。
    主要字段：出库单号、操作人，操作时间、领料人。  领料单号、领料单类型，是否已完成出库（是、否）
    领料单类型：系统生成；人工录入（以后再细化。 有人工出库的物品）。凡是系统生成的，类型就是“系统生成”，凡是人工录入的，暂时先定义为人工录入
    领料单保存明细时生成出库单主表。

    出库单与领料单没有明显的对应关系
2.建立出库明细表
    主要字段：出库单号、领料明细表ID, 物料id,物料规格型号，数量，数量单位，实际领取数量。  
     领料单保存明细时生成出库单明细。
3 建立出库单rfid明细表
     主要字段：id,出库单号、rfid、物料id,物料规格、创建人、创建时间；出库明细表id(为了把此rfid与2表的对应).

出库单管理模块要求的功能：
1. 在出库管理模块，查询出待出库的出库单(根据出库单状态)
2. 点击明细，查看出库清单（查看功能可以合并在编辑中，略去明细功能）
3.点击编辑弹出新窗口（或者grid展开功能更友好一些）。显示出库物品清单与数量; 必要功能：允许修改物料、规格型号、数量。 
      点击保存,保存到出库明细表
      不保存，使用领料单生成的清单默认进行领取
  
      需要编辑页面，因为要修改物料、规格与数量。不适合用grid编辑
4. 在首页点击出库。修改出库状态。（打印出库单有空了可以做，没空了先记录以后做）
     即使出库单的明细与领料单的清单不一致（缺料，变更物料，或者数量有改变），允许修改为已出库.
5. 打印出库单号，列出出库明细

6. 手持机功能
     手持机录入出库单号，扫描多种物料、多个rfid混合提交。 
      后台保存rfid时，要根据rfid去查当前对应的物料、规格，查询不到时，不报错（相应的字段留空）                             
      
      
      
      
7.插单
  插单是销售部发起，通过插入一条生产通知单，程序路线走生成计划路线。插单的优先级（如果有个紧急生产通知单与插单，则先生产紧急生产通知单再进行插单）           
8.挪单
   挪单为挪生产批次，一个批次挪一部分或者全部则会出现几种情况：
   1）挪单的还缺，则需要追加生产通知单(该生产通知可能是正常的生产通知单，也可能为插单)
   2）被挪单的缺失了，则需要追加生产批次，这个生产通知单需要补单。
	   
                                                                                                                                                                 