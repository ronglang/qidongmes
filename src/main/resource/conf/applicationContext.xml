<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="   
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd   
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd   
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd   
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
   http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
   http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
   >


	<!-- http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd 
		http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.5.xsd -->
	<!-- <context:component-scan base-package="com.css.*.web.**.controller" 
		/> <context:annotation-config /> <context:component-scan base-package="com.css" 
		> <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" 
		/> </context:component-scan> -->

	<context:component-scan base-package="com.css.*.web.**" />
	<context:annotation-config />
	<context:component-scan base-package="com.css">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="configProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:conf/jdbc.properties</value>
				<value>classpath:conf/config.properties</value>
				<value>classpath:conf/redis.properties</value>
			</list>
		</property>
	</bean>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>


	<bean id="dataSource" parent="basic">
		<property name="driverClassName" value="${jdbc.drivername}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="basic" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 对泄漏的连接 自动关闭 -->
		<property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,mergeStat" />
		<!-- 监控 <property name="filters" value="stat" /> -->
		<!-- 慢日志查询 缺省为3秒 修改为10秒 10000 -->
		<property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" />

		<!-- DruidDataSource各自独立 ， 支持配置公用监控数据 -->
		<!-- <property name="useGloalDataSourceStat" value="true" /> -->
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop> -->
				<prop key="hibernate.dialect">com.css.common.util.PostgresqlNativeDialect</prop>
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<!--validate update none -->
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<!-- oracle clob <prop key="hibernate.connection.SetBigStringTryClob">true</prop> -->

			</props>
		</property>

		<property name="packagesToScan" value="com.css.**.bean" />
	</bean>

	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="nestedTransactionAllowed" value="true" />
	</bean>

	<tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" />
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 内存数据库redis配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxActive" value="${redis.maxActive}" />
		<property name="maxWait" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="poolConfig" ref="poolConfig"></property>
	</bean>

	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
	</bean>


	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring 
		bean对象 -->
	<bean class="com.css.common.web.syscommon.service.SpringContextHolder"
		lazy-init="false" />

	<!-- <context:component-scan base-package="com.css.*.web.**"></context:component-scan> -->
	<!-- <context:annotation-config /> -->
	<!-- <bean id="taskSchemeDispatch" class="com.css.common.web.scheme.task.TaskSchemeDispatch"></bean> 
		<bean id="SpringQtzJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject"> <ref bean="taskSchemeDispatch"/> </property> 
		<property name="targetMethod"> <value>doJob</value> </property> </bean> -->

	<!-- ======================== 调度触发器 ======================== -->
	<!-- 8,20 是每天的8点或20点触发 8/12 是8点开始触发然后每12小时一次。 因为开关机不定，还是枚举值好些 -->
	<!-- 可能问题：一天两班，然而取任务卡的是天。晚班过了12点就是另一天了 .晚上的任务需优化 -->
	<!-- <bean id="CronTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean"> 
		<property name="jobDetail" ref="SpringQtzJobMethod"></property> <property 
		name="cronExpression" value="0 10/10 * * * ?"></property> </bean> -->

	<!-- ======================== 调度工厂 ======================== -->
	<!-- <bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<property name="triggers"> <list> <ref bean="CronTriggerBean"/> </list> </property> 
		</bean> -->
		
		<!-- 机台速度 定时器 -->
	 <bean id="oeeHistoryDispatch" class="com.css.business.web.subsysmanu.mauManage.controller.MauOEEHistoryManageAction"></bean> 
	 <bean id="oeeHitoryJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
	 <property name="targetObject"> <ref bean="oeeHistoryDispatch"/> </property> 
	 <property name="targetMethod"> <value>setHistory</value> </property> </bean> 

		<!-- 任务下发 定时器 -->
	 <bean id="contextListenerDispatch" class="com.css.commcon.util.ContextListener"></bean> 
	 <bean id="contextListenerMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
	 <property name="targetObject"> <ref bean="contextListenerDispatch"/> </property> 
	 <property name="targetMethod"> <value>plaContext</value> </property> </bean> 
	

	<!-- ======================== 调度触发器 ======================== -->
	<!-- 8,20 是每天的8点或20点触发 8/12 是8点开始触发然后每12小时一次。 因为开关机不定，还是枚举值好些 -->
	<!-- 可能问题：一天两班，然而取任务卡的是天。晚班过了12点就是另一天了 .晚上的任务需优化 -->
	 <bean id="oeeHistoryTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean"> 
		<property name="jobDetail" ref="oeeHitoryJobMethod"></property> 
		<property name="cronExpression" value="0 0 0 * * ? *"></property> 
	</bean> 
	<!-- 下发任务,每6小时执行一次 -->
	<bean id="contextListenerTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean"> 
		<property name="jobDetail" ref="contextListenerMethod"></property> 
		<property name="cronExpression" value="0 0 0-6 * * ? *"></property> 
	</bean> 

	<!-- ======================== 调度工厂 ======================== -->
	 <bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<property name="triggers"> 
			<list> 
				<ref bean="oeeHistoryTriggerBean"/> 
				<ref bean="contextListenerTriggerBean"/> 
			</list> 
		</property> 
	</bean> 
		
</beans>