<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="   
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd   
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd   
   http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd">

	<!-- xmlns:amq="http://activemq.apache.org/schema/core" -->
	<!-- http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.5.xsd -->
	<!-- ActiveMQ 连接工厂 -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://192.168.0.15:61616 以及用户名，密码 -->
	<!-- <amq:connectionFactory id="amqConnectionFactory" brokerURL="tcp://192.168.0.15:61616" 
		userName="admin" password="admin" /> -->
	<!-- 这里暴露内部统一使用的MQ地址 -->
	<bean id="internalTargetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<!-- *********成都的配置************************** -->
		<property name="brokerURL"
			value="failover:(tcp://192.168.0.15:61615,tcp://192.168.0.15:61617,tcp://192.168.0.15:61618)?Randomize=false&amp;jms.prefetchPolicy.all=1" />
		<!-- *********单机开发的配置************************** -->
		<!-- <property name="brokerURL"
			value="failover:(tcp://192.168.0.15:61616)?Randomize=false&amp;jms.prefetchPolicy.all=1" /> -->
		<!-- *********启东的配置************************** -->
		<!-- <property name="brokerURL" value="failover:(tcp://192.168.0.15:61615,tcp://192.168.0.15:61617,tcp://192.168.0.15:61618)?Randomize=false&amp;jms.prefetchPolicy.all=1" 
			/> -->
	</bean>
	<bean id="internalConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop">
		<property name="connectionFactory" ref="internalTargetConnectionFactory" />
		<property name="maxConnections" value="400" />
	</bean>

	<!-- Spring Caching连接工厂 -->
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory_bak"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="internalConnectionFactory"></property>
		<!-- 同上，同理 -->
		<!-- <constructor-arg ref="amqConnectionFactory" /> -->
		<!-- Session缓存数量 -->
		<property name="sessionCacheSize" value="100" />
	</bean>
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="internalTargetConnectionFactory" />
	</bean>

	<!-- Spring JmsTemplate 的消息生产者 start -->

	<!-- 定义JmsTemplate的Queue类型 -->
	<bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<constructor-arg ref="connectionFactory" />
		<!-- 非pub/sub模型（发布/订阅），即点对点队列模式 -->
		<property name="pubSubDomain" value="false" />
	</bean>

	<!-- 定义JmsTemplate的Topic类型 pub/sub模型（发布/订阅） -->
	<!-- <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate"> 
		<constructor-arg ref="connectionFactory" /> <property name="pubSubDomain" 
		value="true" /> </bean> -->

	<!--Spring JmsTemplate 的消息生产者 end -->

	<!-- 接收客户端 -->
	<bean id="QUE_WEB_save_data" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>QUE_WEB_save_data</value>
		</constructor-arg>
	</bean>
	<bean id="QUE_WEB_exception_data" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>QUE_WEB_exception_data</value>
		</constructor-arg>
	</bean>
	<bean id="QUE_WEB_param_data" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>QUE_WEB_param_data</value>
		</constructor-arg>
	</bean>
	<bean id="QUE_WEB_Command_Receive_p2p" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>QUE_WEB_Command_Receive_p2p</value>
		</constructor-arg>
	</bean>
	<bean id="QUE_p2p_Kanban" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>QUE_p2p_Kanban</value>
		</constructor-arg>
	</bean>
	<bean id="QUE_p2p_Kanban_RT" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>QUE_p2p_Kanban_RT</value>
		</constructor-arg>
	</bean>
	<!-- 生产期间质检 -->
	<bean id="QUE_p2p_Quality_MAU" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>QUE_p2p_Quality_MAU</value>
		</constructor-arg>
	</bean>
	<!-- <bean id="sessionUserServiceQueue" class="org.apache.activemq.command.ActiveMQQueue"> 
		<constructor-arg> <value>session.user.service.queue</value> </constructor-arg> 
		</bean> -->

	<!-- 监听 -->
	<!-- 可以获取session的MessageListener -->
	<bean id="mesApacheMqReaderHandler_Display"
		class="com.css.common.web.apachemq.handle.MesApacheMqReaderHandler_Display" />
	<bean id="mesApacheMqReaderHandler_DisplayRT"
		class="com.css.common.web.apachemq.handle.MesApacheMqReaderHandler_DisplayRT" />
	<bean id="mesApacheMqReaderHandler_Exception"
		class="com.css.common.web.apachemq.handle.MesApacheMqReaderHandler_Exception" />
	<bean id="mesApacheMqReaderHandler_ReceiveCommand"
		class="com.css.common.web.apachemq.handle.MesApacheMqReaderHandler_ReceiveCommand" />
	<bean id="mesApacheMqReaderHandler_RuntimeData"
		class="com.css.common.web.apachemq.handle.MesApacheMqReaderHandler_RuntimeData" />
	<bean id="mesApacheMqReaderHandler_SaveData"
		class="com.css.common.web.apachemq.handle.MesApacheMqReaderHandler_SaveData" />
	<bean id="mesApacheMqReaderHandle_Mau"
		class="com.css.common.web.apachemq.handle.MesApacheMqReaderHandle_Mau" />
	<!-- <bean id="consumerSessionAwareMessageListener" class="com.css.common.apachemq.apacheActiveMqSessionMessageListener"> 
		<property name="destination" ref="userServiceQueue"/> </bean> -->

	<!-- 消息监听器 -->
	<bean id="jmsContainer_mesApacheMqReaderHandler_Display"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="QUE_p2p_Kanban" />
		<property name="messageListener" ref="mesApacheMqReaderHandler_Display" />
		<!-- 设置并行数 4-8表示最小并发数是4，最大并发数为8 RB -->
		<property name="concurrency" value="2-8" />
	</bean>
	<bean id="jmsContainer_mesApacheMqReaderHandler_DisplayRT"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="QUE_p2p_Kanban_RT" />
		<property name="messageListener" ref="mesApacheMqReaderHandler_DisplayRT" />
		<!-- 设置并行数 4-8表示最小并发数是4，最大并发数为8 RB -->
		<property name="concurrency" value="2-8" />
	</bean>
	<bean id="jmsContainer_mesApacheMqReaderHandler_Exception"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="QUE_WEB_exception_data" />
		<property name="messageListener" ref="mesApacheMqReaderHandler_Exception" />
		<!-- 设置并行数 4-8表示最小并发数是4，最大并发数为8 RB -->
		<property name="concurrency" value="5-10" />
	</bean>
	<bean id="jmsContainer_mesApacheMqReaderHandler_ReceiveCommand"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="QUE_WEB_Command_Receive_p2p" />
		<property name="messageListener" ref="mesApacheMqReaderHandler_ReceiveCommand" />
		<!-- 设置并行数 4-8表示最小并发数是4，最大并发数为8 RB -->
		<property name="concurrency" value="5-10" />
	</bean>
	<bean id="jmsContainer_mesApacheMqReaderHandler_RuntimeData"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="QUE_WEB_param_data" />
		<property name="messageListener" ref="mesApacheMqReaderHandler_RuntimeData" />
		<!-- 设置并行数 4-8表示最小并发数是4，最大并发数为8 RB -->
		<!-- <property name="concurrency" value="5-10"/> -->
	</bean>
	<bean id="jmsContainer_mesApacheMqReaderHandler_SaveData"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="QUE_WEB_save_data" />
		<property name="messageListener" ref="mesApacheMqReaderHandler_SaveData" />
		<!-- 设置并行数 4-8表示最小并发数是4，最大并发数为8 RB -->
		<property name="concurrency" value="5-10" />
	</bean>
	<bean id="jmsContainer_mesApacheMqReaderHandle_Mau"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="QUE_p2p_Quality_MAU" />
		<property name="messageListener" ref="mesApacheMqReaderHandle_Mau" />
		<!-- 设置并行数 4-8表示最小并发数是4，最大并发数为8 RB -->
		<property name="concurrency" value="5-10" />
	</bean>
	<!-- 有会话 -->
	<!-- <bean id="sessionAwareListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"> 
		<property name="connectionFactory" ref="connectionFactory" /> <property name="destination" 
		ref="userServiceQueue" /> <property name="messageListener" ref="consumerSessionAwareMessageListener" 
		/> </bean> -->



	<!-- 消息消费者 start 用户接受推送 <bean id="userPushListenerConsumer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"> 
		<property name="connectionFactory" ref="connectionFactory" /> <property name="destination" 
		ref="userServiceQueue" /> <property name="messageListener" ref="consumerMessageListener" 
		/> </bean> 这个是sessionAwareQueue目的地 <bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue"> 
		<constructor-arg> <value>sessionAwareQueue</value> </constructor-arg> </bean> 
		定义Queue监听器 <jms:listener-container destination-type="queue" container-type="default" 
		connection-factory="connectionFactory" acknowledge="auto"> <jms:listener 
		destination="test.queue" ref="queueReceiver1"/> <jms:listener destination="test.queue" 
		ref="queueReceiver2"/> </jms:listener-container> 定义Topic监听器 <jms:listener-container 
		destination-type="topic" container-type="default" connection-factory="connectionFactory" 
		acknowledge="auto"> <jms:listener destination="test.topic" ref="topicReceiver1"/> 
		<jms:listener destination="test.topic" ref="topicReceiver2"/> </jms:listener-container> 
		消息消费者 end -->
</beans>